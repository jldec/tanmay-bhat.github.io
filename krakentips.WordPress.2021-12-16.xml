<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress.com" created="2021-12-16 18:10"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Kraken Tips</title>
	<link>https://krakentips.wordpress.com</link>
	<description>Yet another tech blog !</description>
	<pubDate>Thu, 16 Dec 2021 18:10:36 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>https://krakentips.wordpress.com</wp:base_blog_url>

		<wp:author><wp:author_id>192206614</wp:author_id><wp:author_login><![CDATA[tanmaybhat24]]></wp:author_login><wp:author_email><![CDATA[tanmaybhat24@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[Tanmay Bhat]]></wp:author_display_name><wp:author_first_name><![CDATA[Tanmay]]></wp:author_first_name><wp:author_last_name><![CDATA[Bhat]]></wp:author_last_name></wp:author>

				
	<generator>http://wordpress.com/</generator>
<image>
		<url>https://s0.wp.com/i/buttonw-com.png</url>
		<title>Kraken Tips</title>
		<link>https://krakentips.wordpress.com</link>
	</image>
	
		<item>
		<title><![CDATA[How to install mhVTL in openSUSE]]></title>
		<link>https://krakentips.wordpress.com/2021/01/14/how-to-install-mhvtl-in-opensuse/</link>
		<pubDate>Thu, 14 Jan 2021 18:12:03 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=41</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSQN7sZxQ--Ks4MVt9ekHnY2XPGwlMS9VCZOg&amp;usqp=CAU" alt="" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Lets see how to install mhVTL (a FOSS VTL software) written by a super hero called : Mark Harvey.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are 2 ways you can install mhvtl :</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Install the rpm package</li><li>Directly compile the source code yourself.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>I have tried using the first method as its easy and fast :D.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Note: I have tested this install in openSUSE 15.2</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>lets get started :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.First update the packages to latest version available by typing :</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><kbd>sudo zypper up</kbd></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>2. Once the packages are up to date, install the below supporting packages :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><kbd>sudo zypper install gcc gcc-c++ kernel-devel zlib-devel mt-st mtx lzo-devel perl</kbd></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3. Now add the repository and install the package :</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.2:Update/standard/openSUSE:Leap:15.2:Update.repo
zypper refresh
zypper install mhvtl</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>4. start the mhvtl service ;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>service mhvtl start </code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>5. check if mhvtl service is running :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>service mhvtl status</code></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>test-machine:/home/azureuser # service mhvtl status
‚óè mhvtl.target - mhvtl service allowing to start/stop all vtltape@.service and vtllibrary@.service instances at once
   Loaded: loaded (/usr/lib/systemd/system/mhvtl.target; disabled; vendor preset: disabled)
   Active: active since Thu 2021-01-14 17:13:36 UTC; 50min ago</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>6. verify if you are able to see the tape library and the drives configured( by default) :</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">&lt;code&gt;test-machine:/home/azureuser # lsscsi -g
[1:0:0:0]    cd/dvd  Msft     Virtual CD/ROM   1.0   /dev/sr0   /dev/sg3 
[2:0:0:0]    disk    Msft     Virtual Disk     1.0   /dev/sda   /dev/sg0 
[3:0:1:0]    disk    Msft     Virtual Disk     1.0   /dev/sdb   /dev/sg1 
[5:0:0:0]    disk    Msft     Virtual Disk     1.0   /dev/sdc   /dev/sg2 
[6:0:0:0]    mediumx STK      L700             0162  /dev/sch0  /dev/sg12
[6:0:1:0]    tape    IBM      ULT3580-TD5      0162  /dev/st0   /dev/sg4 
[6:0:2:0]    tape    IBM      ULT3580-TD5      0162  /dev/st7   /dev/sg11
[6:0:3:0]    tape    IBM      ULT3580-TD4      0162  /dev/st3   /dev/sg7 
[6:0:4:0]    tape    IBM      ULT3580-TD4      0162  /dev/st4   /dev/sg8 
[6:0:8:0]    mediumx STK      L80              0162  /dev/sch1  /dev/sg13
[6:0:9:0]    tape    STK      T10000B          0162  /dev/st2   /dev/sg6 
[6:0:10:0]   tape    STK      T10000B          0162  /dev/st5   /dev/sg9 
[6:0:11:0]   tape    STK      T10000B          0162  /dev/st1   /dev/sg5 
[6:0:12:0]   tape    STK      T10000B          0162  /dev/st6   /dev/sg10&lt;/code&gt;</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>For more details about mhvtl, please refer the below link :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://sites.google.com/site/linuxvtl2/">https://sites.google.com/site/linuxvtl2/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date><![CDATA[2021-01-14 23:42:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-14 18:12:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-05-15 19:43:31]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-05-15 14:13:31]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-install-mhvtl-in-opensuse]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="category" nicename="vtl"><![CDATA[vtl]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_client_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[53441460704]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1610647925]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to SSH into docker in PWD (Play With Docker)]]></title>
		<link>https://krakentips.wordpress.com/2021/01/22/how-to-ssh-into-docker-in-pwd-play-with-docker/</link>
		<pubDate>Fri, 22 Jan 2021 04:58:28 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=56</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","id":66,"sizeSlug":"large","linkDestination":"none"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://krakentips.files.wordpress.com/2021/01/whale20logo332_5.png?w=269" alt="" class="wp-image-66" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Hey all ! For those of you who don't  know what PWD is below is short explanation :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, PWD stands for Play With Docker. You can deploy &amp; learn docker at free with time limit of each instance up-to 10 Hrs!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For more info, go to :<a href="https://labs.play-with-docker.com/">https://labs.play-with-docker.com/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are two ways you can access the docker instance.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Use the web based console.</li><li>SSH into that instance.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>I always love to do ssh as it gives me more freedom.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you go straight away and do ssh from your terminal, you will get :</p>
<!-- /wp:paragraph -->

<!-- wp:verse -->
<pre class="wp-block-verse">lab-suse:~/.ssh # ssh ip-x-x-x-@direct.labs.play-with-docker.com
ip-x-x-x-@direct.labs.play-with-docker.com: Permission denied (publickey).</pre>
<!-- /wp:verse -->

<!-- wp:paragraph -->
<p>Why are we getting this ? because there is no fresh key generated in your host.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lets create a fresh key, run the below command :</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre id="block-f6743d5e-a71a-4af4-8b17-1637e21f28f9" class="wp-block-preformatted">lab-suse:~/.ssh# <code>ssh-keygen</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>After you complete the above command, try ssh again, it should work: </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre id="block-c1e67349-a5d7-4862-842b-58f3a507caf0" class="wp-block-preformatted">lab-suse:~/.ssh# ssh ip-x-x-x-@direct.labs.play-with-docker.com
 The authenticity of host 'direct.labs.play-with-docker.com (40.76.55.146)' can't be established.
 RSA key fingerprint is SHA256:UyqFRi42lglohSOPKn6Hh9M83Y5Ic9IQn1PTHYqOjEA.
 Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
 Warning: Permanently added 'direct.labs.play-with-docker.com,40.76.55.146' (RSA) to the list of known hosts.
 Connecting to Ip-x-x-x:8022

#########################################################                                                         #                          WARNING!!!!                        #                                                         # This is a sandbox environment. Using personal credentials   #                                                         # is HIGHLY! discouraged. Any consequences of doing so are    #                                                         # completely the user's responsibilites.                      #                                                         #                                                             #                                                         # The PWD team.                                               #                                                         ###############################################################                                                         <a href="local">node1</a> root@192.168.0.28 ~</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Note : if you are using any ssh applications, save that key you generated to a file and load that file in authentication section. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>This was a quick how-to and see you in the next one !</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date><![CDATA[2021-01-22 10:28:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-22 04:58:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-22 10:28:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-22 04:58:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-ssh-into-docker-in-pwd-play-with-docker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="how-to"><![CDATA[how to]]></category>
		<category domain="post_tag" nicename="pwd"><![CDATA[pwd]]></category>
		<category domain="post_tag" nicename="ssh-pwd"><![CDATA[ssh pwd]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[66]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_25816526]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_linkedin_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[53751668766]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1611291510]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:25816526;s:59:"https://twitter.com/Tanmaybhat98/status/1352480738806030336";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_23503769]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[Tanmaybhat98]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_23503770]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_25816528]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to install netstat tool in openSUSE 15]]></title>
		<link>https://krakentips.wordpress.com/2021/01/25/how-to-install-netstat-tool-in-opensuse-15/</link>
		<pubDate>Sun, 24 Jan 2021 19:33:12 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","width":480,"height":298,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://cdn.pixabay.com/photo/2013/07/13/13/41/bash-161382_960_720.png" alt="" width="480" height="298" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Even though the <strong>netstat </strong>tool is depreciated, sometimes we can't stop the old habit and we arrive at a situation where its difficult to adapt to new things.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Actually we should be using <strong>ss </strong>tool installed of netstat !</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All common network related tools are bundled with package net-tools.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>nwlab:/etc # rpm -qa | grep net-tools<br>net-tools-2.0+git20170221.479bb4a-lp152.5.5.x86_64</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However in openSUSE 15, the team decided to knock it off from net tools package!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><span style="text-decoration:underline;"><strong>So, the solution ?</strong></span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"align":"justify"} -->
<p class="has-text-align-justify">Install the package net-tools-deprecated by typing:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>sudo zypper install net-tools-deprecated</code></p>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column {"width":"100%"} -->
<div class="wp-block-column" style="flex-basis:100%;"><!-- wp:paragraph -->
<p><kbd>nwlab:/etc # rpm -qa | grep net-tools<br>net-tools-2.0+git20170221.479bb4a-lp152.5.5.x86_64<br>net-tools-deprecated-2.0+git20170221.479bb4a-lp152.5.5.x86_64</kbd></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Once installed, netstat should work totally fine now !</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><kbd>nwlab:/etc # netstat -ano | grep 9000<br>tcp6 0 0 :::9000 :::* LISTEN off (0.00/0/0)<br>nwlab:/etc #</kbd></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2021-01-25 01:03:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-24 19:33:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-25 01:03:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-24 19:33:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-install-netstat-tool-in-opensuse-15]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="how-to"><![CDATA[how to]]></category>
		<category domain="post_tag" nicename="netstat"><![CDATA[netstat]]></category>
		<category domain="post_tag" nicename="opesuse-15"><![CDATA[opesuse 15]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_25816526]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_linkedin_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[53853063467]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:25816526;s:59:"https://twitter.com/Tanmaybhat98/status/1353425645884354561";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1611516794]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_23503769]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[Tanmaybhat98]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_23503770]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_25816528]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to claim free Azure certification  vouchers after attending Microsoft Events]]></title>
		<link>https://krakentips.wordpress.com/2021/04/26/how-to-claim-free-azure-certification-vouchers-after-attending-microsoft-events/</link>
		<pubDate>Mon, 26 Apr 2021 05:56:06 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=82</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Microsoft is offering fundamentals exam vouchers for those who attend and complete their virtual training. You can take a look at upcoming events and register by going to <a href="https://events.microsoft.com">https://events.microsoft.com</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":85,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/04/image.png?w=937" alt="" class="wp-image-85" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Then you can register for the training of an exam of your choice by searching it in the page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So far I have seen that Microsoft offers free exam vouchers for all fundamentals exam i.e. Azure Data Fundamentals(<a href="https://docs.microsoft.com/en-us/learn/certifications/azure-data-fundamentals/">DP-900</a>), Azure Fundamentals <a href="https://docs.microsoft.com/en-us/learn/certifications/azure-fundamentals/#certification-exams">(AZ-900</a>), Azure AI fundamentals (<a href="https://docs.microsoft.com/en-us/learn/certifications/azure-ai-fundamentals/">AI-900</a>).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you register the training and attend it, you can go to that certification website, schedule it through Pearson VUE. &nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":91,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/04/image-2.png?w=948" alt="" class="wp-image-91" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If the email used to register for the event is the same as the MSA (Microsoft Account) email used for certification, You should see a banner to claim 100% free voucher, click <em>claim </em>to get that, like below.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":89,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/04/image-1.png?w=185" alt="" class="wp-image-89" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Then you can schedule the exam at your day of choice from home and get certified.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Source </strong>: https://trainingsupport.microsoft.com/en-us/mcp/forum/mcp_other/azure-fundamentals-certification-exam-at-no-cost/44a80497-a18e-4ecd-bf3a-5459775baf11</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date><![CDATA[2021-04-26 11:26:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-26 05:56:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-26 11:26:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-26 05:56:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-claim-free-azure-certification-vouchers-after-attending-microsoft-events]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="claim-azure-voucher"><![CDATA[claim azure voucher]]></category>
		<category domain="post_tag" nicename="free-voucher"><![CDATA[free voucher]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[93]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_25816526]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[57611564852]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:25816526;s:59:"https://twitter.com/Tanmaybhat98/status/1386559703254110209";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1619416569]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_23503769]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[Tanmaybhat98]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d364bdd217fd91ef054d53bf1e96d235]]></wp:meta_key>
		<wp:meta_value><![CDATA[<div class="embed-reddit">    <blockquote class="reddit-card" >      <a href="https://www.reddit.com/r/bsnl/comments/ht37q4/guide_for_bsnl_ftth/?ref_source=embed&amp;ref=share">[Guide] For BSNL FTTH</a> from      <a href="https://www.reddit.com/r/bsnl/">bsnl</a>    </blockquote>    <script async src="https://embed.redditmedia.com/widgets/platform.js" charset="UTF-8"></script></div>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_d364bdd217fd91ef054d53bf1e96d235]]></wp:meta_key>
		<wp:meta_value><![CDATA[1619527556]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to change DNS server for Syrotech Router [BSNL FTTH]]]></title>
		<link>https://krakentips.wordpress.com/2021/04/27/how-to-change-dns-server-for-syrotech-router-bsnl-ftth/</link>
		<pubDate>Tue, 27 Apr 2021 12:56:11 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=97</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://cdn.pixabay.com/photo/2020/02/03/00/12/fiber-4814456_960_720.jpg" alt="" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Ok, to be honest, I searched a lot on the internet to change ISP DNS servers to 3rd party servers (which you should !) for my router and couldn't find a direct article / steps to do that. Hence, this article.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Steps to change the ISP DNS to 3rd party DNS :</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Open the router login page, which is mostly : <strong><a href="http://192.168.1.1">192.168.1.1</a> </strong>in your case.</li><li>After logging in, navigate to Network page, ¬†LAN IP Address tab.</li><li>Change the <em>Lan Dns Mode</em> to : <strong>static</strong></li><li>Set the primary and secondary DNS address and click on Save/Apply.</li><li>Perform a reboot of router to apply the changes.</li></ol>
<!-- /wp:list -->

<!-- wp:image {"id":104,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/04/screenshot-2021-04-27-180654.png?w=815" alt="" class="wp-image-104" /><figcaption>Config details</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>There are a lot of DNS providers out there most of them for free. However, please be wise while choosing them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I have chosen <span style="text-decoration:underline;">1.1.1.1 </span>DNS as my primary server which is provided by Cloudflare.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I have set the secondary  server to <span style="text-decoration:underline;">8.8.8.8 </span> which is provided by Google so that if one of the service is down, it will fallback to another.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>List of some of the best DNS providers list : <a href="https://www.reddit.com/r/sysadmin/comments/976aj2/updated_list_of_public_dns_resolvers_curated_by/">https://www.reddit.com/r/sysadmin/comments/976aj2/updated_list_of_public_dns_resolvers_curated_by/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Psst...... <strong>Feeling Geeky ?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Perform DNS benchmark tests : <a href="https://www.grc.com/dns/benchmark.htm">https://www.grc.com/dns/benchmark.htm</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Cloudflare DNS validation test : <a href="https://1.1.1.1/help">https://1.1.1.1/help</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Need more? Read the below detailed guide for BSNL FTTH -<a href="https://www.reddit.com/r/bsnl/comments/ht37q4/guide_for_bsnl_ftth/">https://www.reddit.com/r/bsnl/comments/ht37q4/guide_for_bsnl_ftth/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Worth reading : <a href="https://www.howtogeek.com/664608/why-you-shouldnt-be-using-your-isps-default-dns-server/">https://www.howtogeek.com/664608/why-you-shouldnt-be-using-your-isps-default-dns-server/</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date><![CDATA[2021-04-27 18:26:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-27 12:56:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-27 18:26:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-27 12:56:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-change-dns-server-for-syrotech-router-bsnl-ftth]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="post_tag" nicename="bsnl-ffth-dns"><![CDATA[bsnl ffth dns]]></category>
		<category domain="post_tag" nicename="change-bsnl-router-dns"><![CDATA[change bsnl router dns]]></category>
		<category domain="post_tag" nicename="change-syrotech-router-dns"><![CDATA[change syrotech router dns]]></category>
		<category domain="category" nicename="ftth"><![CDATA[ftth]]></category>
		<category domain="post_tag" nicename="how-to-change-bsnl-dns"><![CDATA[how to change bsnl dns]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[57671651329]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[108]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:25816526;s:59:"https://twitter.com/Tanmaybhat98/status/1387027806207500294";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_23503769]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_25816526]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1619528173]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[Tanmaybhat98]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6f00eb7bd95948dd4b68fe5243e8addb]]></wp:meta_key>
		<wp:meta_value><![CDATA[<div class="embed-reddit"><div class="reddit-embed" data-embed-media="www.redditmedia.com" data-embed-parent="false" data-embed-live="false" data-embed-uuid="e425aee4-ae30-11eb-93ef-0e76375096af" data-embed-created="2021-05-06T06:04:17.426368+00:00"><a href="https://www.reddit.com/r/explainlikeimfive/comments/2jv11s/eli5how_do_dns_servers_work/clfcim8/">Comment</a> from discussion <a href="https://www.reddit.com/r/explainlikeimfive/comments/2jv11s/eli5how_do_dns_servers_work/">azz_kikkr's comment from discussion &quot;ELI5:How do DNS Servers Work?&quot;</a>.</div><script async src="https://www.redditstatic.com/comment-embed.js"></script></div>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_6f00eb7bd95948dd4b68fe5243e8addb]]></wp:meta_key>
		<wp:meta_value><![CDATA[1620281057]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[DNS servers : A closer look]]></title>
		<link>https://krakentips.wordpress.com/?p=112</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Hey everyone, today's topic is DNS servers; mainly 3rd party servers out there and how they benefit in day to day life compared to default ISP DNS servers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Highly recommended explanation for how DNS servers work : <a href="https://www.reddit.com/r/explainlikeimfive/comments/2jv11s/eli5how_do_dns_servers_work/clfcim8?utm_source=share&amp;utm_medium=web2x&amp;context=3">here</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Want a video instead ? Watch <a href="https://youtu.be/Wj0od2ag5sk">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ok, now that you know how DNS servers work, lets take a look at default DNS servers provided by your ISP and why they do that instead of global one (like google)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Reason</strong> : Unless the website you visit isn't <a href="https://www.cloudflare.com/en-in/learning/ssl/what-is-https/">HTTPS </a>(the green lock symbol left to website address) your ISP can see the data you send &amp; receive from a website. Shocking right ?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That is the reason <a href="https://serverguy.com/ssl/google-forcing-ssl-certificate-websites/">google is enforcing</a> all websites to use https instead of old tech: http</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>What's in it for ISP : </strong>Basically your ISP can see which website you visit the most, make a profile on you, sell it for his Starbucks coffee! who  knows !</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>He can also restrict you from going to some of the websites which he wants, lets say some news articles, some protest details etc. He can also make your website load slower which can make you feel don't want to visit that website anymore ( if he wants to make you feel that way)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2021-05-06 11:52:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-05-06 11:52:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-05-06 06:22:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Configuring TP -Link TL-WR740N as WI-FI repeater]]></title>
		<link>https://krakentips.wordpress.com/2021/08/11/configuring-tp-link-tl-wr740n-as-wi-fi-repeater/</link>
		<pubDate>Tue, 10 Aug 2021 19:06:50 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","id":133,"width":302,"height":206,"sizeSlug":"large","linkDestination":"none"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://krakentips.files.wordpress.com/2021/08/wireless-signal-1119306_1280.png?w=1024" alt="" class="wp-image-133" width="302" height="206" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Hey people, in this article, we'll see how to configure TP -Link <a href="https://www.tp-link.com/in/home-networking/wifi-router/tl-wr740n/">TL-WR740N</a> (preferably old one) as repeater to extend your main WI-FI signal in your house.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lets get into basics real quick.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>What's a repeater ?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Definition : A WiFi repeater or extender is used&nbsp;<strong>to extend the coverage area of your Wi-Fi network</strong>. It works by receiving your existing Wi-Fi signal, amplifying it and then transmitting the boosted signal.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Prerequisites :</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Main / primary router</li><li>Secondary / old router </li><li>This article to help you out :)</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Steps  on secondary router :</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Do a factory reset of your secondary router. You can refer <a href="https://youtu.be/4AkkPRE9ZBM">this</a> video for how-to steps.</li><li>Once the router is up and running, connect to it wirelessly / through LAN cable.</li><li>Go to admin console by typing this IP address in browser URL : <code>192.168.0.1</code> with credentials , username : <code>admin </code>&amp; password : <code>admin </code> ( super secure :D )</li><li>Lets first change the IP address of this router to something else rather than the default one as later this IP can cause IP allocation conflict due to DHCP set in primary router.</li><li>To to that , lets go to Network -&gt; LAN -&gt; IP address and change it to something like <code>192.168.1.100</code> .and hit <code>Save</code>. ( you can change it to almost any IP you like in this subnet) </li></ol>
<!-- /wp:list -->

<!-- wp:image {"id":127,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/08/ip_change.png?w=750" alt="" class="wp-image-127" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>6. Do a <em>reboot </em>of the router and connect back to router console using the new IP in browser URL i.e. in my case  <code style="font-size:1em;color:var(--darkreader-text--wp--preset--color--foreground);">192.168.1.100</code><span style="font-size:1em;background-color:var(--darkreader-bg--wp--preset--color--background);color:var(--darkreader-text--wp--preset--color--foreground);font-family:var(--font-base, &quot;PT Sans&quot;, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Roboto&quot;, &quot;Oxygen&quot;, &quot;Ubuntu&quot;, &quot;Cantarell&quot;, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif);"> </span> or the IP given by you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>7. Lets configure the repeater mode. To do that, go to <code>Wireless-&gt; Enable WDS Bridging</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>8. Click on Survey and select the WIFI name which you want to repeat.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>9. Type the password for that in <strong>Password</strong> field and hit <code>Save</code>. Later you may get alert on switching the repeater to be in same Wi-Fi  channel as main router, select ok to that pop-up.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":132,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/08/wds.png?w=906" alt="" class="wp-image-132" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>10. Next thing would be to setup DHCP of the router.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'll explain a bit here regarding the <em>problem </em>I faced.  According to YouTube tutorials and articles out there, we need to disable the DHCP option in secondary router.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What I faced after that is <em>I cant connect any device to that router later as </em>DHCP is disabled, the router wont be able to assign any IP address to any device asking for connection. So your device will be struck in "Obtaining IP address".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So I found out the below trick and its working brilliantly for me.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":130,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/08/dhcp.png?w=935" alt="" class="wp-image-130" /><figcaption>DHCP setting</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>11. Ok, lets through the settings one by one, </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>DHCP Server</strong> : Keep it <code>Enable</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Start IP Address:</strong> Enter : <code>192.168.1.101</code> OR the +1 IP of the assigned IP to your router. i.e</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you gave <code>192.168.1.10</code> to your router, mention here <code>192.168.1.11</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>End IP Address:</strong> : Enter  <code>192.168.1.199</code> or the IP range limit you need. I mentioned here 98 (199 - 101) Address limit assuming my number of devices wont exceed 98 devices :D </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>[ Follow the start IP address logic if you mentioned any alternate IP address to router. ]</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Address Lease Time:</strong> Keep the default value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Default Gateway:</strong> Here, enter the IP address of your primary router. You can mostly find out by seeing the backside of your primary router.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Else, you can run the below command via cmd to get the value ( after connecting to primary router)  : </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>ipconfig /all | findstr Gateway<br>Default Gateway . . . . . . . . . : 192.168.1.1</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Default Domain:</strong> Keep the default value i.e. empty.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Primary DNS:</strong> You can mention the DNS resolver address. This is optional  and same for below one also. if none is mentioned, DNS resolver given by ISP is used. which is not a good solution from privacy perspective. You can use Google Public DNS ( 8.8.8.8) , Quad DNS,(9.9.9.9) Cloud flare DNS (1.1.1.1) here.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Secondary DNS:</strong> This value corresponds to what resolver to use if the request is not resolved by the first DNS. Its good to mention different service to ensure high reliability.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That's it. hit <code>Save </code>and do a reboot of the server to get new changes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Note </strong>: there's a high change you wont be able to connect to your repeater later if you're in a Wi-Fi crowded place i.e. you are surrounded by lot of WIFI. When there are lot of Wifi nearby the router tries to get to channel which is less crowded.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But in repeater mode, both repeater and main router needs to be in same Wi-Fi channel. So I would highly advice you to go to your primary router <strong>set the Wi-Fi to a particular channel</strong> and keep the same channel in repeater also. rather than the default setting : <code>Auto</code>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2021-08-11 00:36:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-10 19:06:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-11 00:41:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-10 19:11:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[configuring-tp-link-tl-wr740n-as-wi-fi-repeater]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="post_tag" nicename="how-to-configure-tl-wr740n-as-repeater"><![CDATA[How to configure TL-WR740N as repeater]]></category>
		<category domain="post_tag" nicename="tl-wr740n-repeater"><![CDATA[TL-WR740N repeater]]></category>
		<category domain="post_tag" nicename="tp-link-repeater"><![CDATA[tp link repeater]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="wifi-repeater"><![CDATA[wifi repeater]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[61715926173]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1628622412]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Pulling private image from Docker hub in GitLab CI]]></title>
		<link>https://krakentips.wordpress.com/2021/08/23/pulling-private-image-from-docker-hub-in-gitlab-ci/</link>
		<pubDate>Mon, 23 Aug 2021 14:50:33 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=139</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","id":151,"width":542,"height":406,"sizeSlug":"full","linkDestination":"none"} -->
<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><img src="https://krakentips.files.wordpress.com/2021/08/pexels-photo-3872479.jpeg" alt="" class="wp-image-151" width="542" height="406" /><figcaption>Photo by Louis Podevin on <a href="https://www.pexels.com/photo/bird-s-eye-view-of-seashore-3872479/" rel="nofollow">Pexels.com</a></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Hey people ! I'm back this time with a how-to on GitLab CI to make your life easy being DevOps Engineer. I thought of  writing this since I spent hours searching and fixing this :/ </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lets look at the problem or the requirement. It goes like this :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"I have a GitLab CI file integrated into my project which builds a Dockerfile and pushes that image into ECR. But the dockerfile has a base image which is from a private Docker hub repository. how do I pull from that repo ?"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lets consider the below <code>gitlab-ci.yml</code> file :</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>image: "python:3.6"     
                    
stages:                                   
  - publish_image                         

build and push docker image:        
  stage: publish_image
  only:                                   
    variables:
        - $CI_COMMIT_TAG =~ /^v&#091;0-9]+\.&#091;0-9]+\.&#091;0-9]+-&#091;0-9]+\.&#091;0-9]+\.&#091;0-9]+$/ 
        - $CI_COMMIT_TAG =~ /^v&#091;0-9]+\.&#091;0-9]+\.&#091;0-9]+$/     
  variables:
    DOCKER_HOST: tcp://docker:2375
  image: 
    name: amazon/aws-cli
    entrypoint: &#091;""]
  services:
    - docker:dind 
  before_script:
    - echo "$CI_COMMIT_TAG"
    - amazon-linux-extras install docker
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t $DOCKER_REGISTRY/$APP_NAME:$DOCKER_TAG .
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY 
    - docker push $DOCKER_REGISTRY/$APP_NAME:$CI_COMMIT_TAG
    - docker push $DOCKER_REGISTRY/$APP_NAME:$DOCKER_TAG</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Link for the above file : <a href="https://gist.github.com/tanmay-bhat/6fa65b9cd9d5f7f5e780dbe3efcb1fb7">Here</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What the above CI file does :</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Uses base image <code>python</code> on which the stages will run.</li><li>has a single stage which will build and push images to ECR</li><li><em>only</em> section tells gitlab to run the stage only if the git tag is done and it matched the regex mentioned. </li><li>in <em>before_script</em> section, we're displaying the commit tag and installing docker in aws-cli image since that image doesn't come preinstalled with docker.</li><li>finally we're doing docker login to with our dockerhub account before building Dockerfile.</li><li>Later we build the Dockerfile and then push it to ECR</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Now, lets see <strong>How to login to Docker hub in GitLab CI to pull your private repository images</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>To configure the Dockerhub credentials, go to your GitLab <em>project -&gt; settings -&gt; CI/CD</em></li><li>In Variables section, add the below Key and their value :</li></ol>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Key : CI_REGISTRY ||  Value : docker.io
Key : CI_REGISTRY_USER ||  Value : &lt;your_dockerhub_username&gt;
Key : CI_REGISTRY_PASSWORD || Value : &lt;your_dockerhub_password&gt; </code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":144,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/08/image.png?w=1024" alt="" class="wp-image-144" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now, to configure AWS credentials, configure the below Keys and their values :</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Key : AWS_ACCESS_KEY_ID || Value : &lt;your_aws_accesskey&gt;
Key : AWS_SECRET_ACCESS_KEY || Value : &lt;your_aws_secretkey&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":147,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/08/image-1.png?w=1024" alt="" class="wp-image-147" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>That's it.  Voila !! the GitLab runner should pull your docker credentials from variables and pull the image.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date><![CDATA[2021-08-23 20:20:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-23 14:50:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-23 20:21:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-23 14:51:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pulling-private-image-from-docker-hub-in-gitlab-ci]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="category" nicename="docker"><![CDATA[docker]]></category>
		<category domain="post_tag" nicename="gitlab-ci"><![CDATA[gitlab-ci]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[62186301354]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1629730235]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to access AWS EKS cluster when you mess up the aws-auth configmap]]></title>
		<link>https://krakentips.wordpress.com/2021/09/01/how-to-access-aws-eks-cluster-when-you-mess-up-the-aws-auth-configmap/</link>
		<pubDate>Wed, 01 Sep 2021 06:04:29 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=153</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","id":158,"width":432,"height":287,"sizeSlug":"full","linkDestination":"none"} -->
<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><img src="https://krakentips.files.wordpress.com/2021/09/pexels-photo-2114014.jpeg" alt="" class="wp-image-158" width="432" height="287" /><figcaption>Photo by Magda Ehlers on <a href="https://www.pexels.com/photo/white-clouds-2114014/" rel="nofollow">Pexels.com</a></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Hey people, this is not a complete solution article, but rather a cut story and a probable solution for the below problem statement when it comes to locked out issue in EKS cluster:</p>
<!-- /wp:paragraph -->

<!-- wp:verse -->
<pre class="wp-block-verse">'I wanted to add a user to my EKS, hence while adding the user to <code>aws-auth configmap</code> of my EKS cluster, I made some syntax mistakes and now neither I nor anyone can login to EKS cluster" whole cluster is gone, help me please !!! </pre>
<!-- /wp:verse -->

<!-- wp:paragraph -->
<p><span style="text-decoration:underline;">Straight forward solution which I found out :</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Find out who created the EKS cluster and ask them to edit the aws-auth configmap and correct your mistakes.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The user who created the cluster is the root user for entity. Hence regardless of aws-auth configmap mess, he/she can login via kubectl anytime.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Read more <a href="https://aws.amazon.com/premiumsupport/knowledge-center/eks-api-server-unauthorized-error/">here </a>on solution by AWS.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I wrote this because I made this mistake in my company and spent hours searching for answer before finding this info.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once I found out the creator, she corrected it in 1 min. :D </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Good work buddy, job secured !!!!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><strong>Long term solution :</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You might be saying ' Thats one solution to save my job, how do I make sure I dont do this mistake again ?'</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Alright, so here's what you can follow from next time :</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>First get the configmap yaml file by typing :</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph {"align":"left"} -->
<p class="has-text-align-left"><code>kubectl get configmap aws-auth -n kube-system -o yaml &gt; aws-auth-configmap.yml</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2. Once you get the yaml file, edit the file using your favorite text editor and update your changes. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3. Now, update the configmap with your new updated file by typing :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>kubectl apply -n kube-system -f <code>aws-auth-configmap.yml</code> </code></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><strong>Remember</strong>, live editing is never a good option !!!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date><![CDATA[2021-09-01 11:34:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-01 06:04:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-01 14:21:59]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-01 08:51:59]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-access-aws-eks-cluster-when-you-mess-up-the-aws-auth-configmap]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="aws-auth-issue"><![CDATA[aws-auth issue]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[62508517687]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1630476270]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Himiko]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[himikohimi199.9@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[223.186.198.226]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-09-01 13:11:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-09-01 07:41:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Glad that you got the solution üòÑ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[comment_like_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1631866394.729192;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"tanmaybhat24";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1631866394]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630482060.890732;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1631867360.712265;s:5:"event";s:17:"status-unapproved";s:4:"user";s:12:"tanmaybhat24";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1631867362.659129;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"tanmaybhat24";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1631867362]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630486837.103062;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Story of keeping CI pipeline from getting screwed when AWS pushes broken docker image to Docker hub]]></title>
		<link>https://krakentips.wordpress.com/2021/09/19/story-of-keeping-ci-pipeline-from-getting-screwed-when-aws-pushes-broken-docker-image-to-docker-hub/</link>
		<pubDate>Sun, 19 Sep 2021 14:45:04 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":169,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/09/paul-teysen-bukjsecgmeu-unsplash.jpg?w=1024" alt="" class="wp-image-169" /><figcaption>Photo by <a href="https://unsplash.com/@hooverpaul55?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Paul Teysen</a> on <a href="https://unsplash.com/s/photos/container?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If you're using aws-cli docker image in your CI pipeline then this story could be useful &amp; amusing for you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On Thursday, I started receiving alerts that our CI pipeline is failing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I started checking the failed job error and it pointed out to docker is unable to install killing the pipeline.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Installing docker
Installation failed. Check that you have permissions to install.
Cleaning up file based variables
ERROR: Job failed: command terminated with exit code 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>After scratching the head for sometime, I found that the latest <code>aws-cli </code>image from amazon Docker hub repository is causing the issue as I haven't changed anything else in the CI file in few weeks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So I went to Docker hub and I saw on that day there was a new version pushed which was 2.2.39 tagged as <em>latest</em>. Since in our CI file, we didn't mention specific image version to pull so it always assumes the tag to pull is <em>latest</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a temporary fix, I changed the image version to older one which was 2.2.38 and it worked fine.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you ask me for a better a better solution, it would be always good to use a specific version in production since you know it will work for sure instead of using <em>latest</em> tag which could change every single day.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Else push that image to your private container repositories like ECR and pull from there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'm pretty sure AWS broke few thousand CI pipelines over the world whoever used latest as the image tag :D</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>To give an idea about how to install docker inside <code>aws-cli</code> image, you can just run the below command which should install docker from AWS hosted repo for a faster install :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>amazon-linux-extras install docker</code></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p> DevOps story ends here. I'll update more stories like this in future :) </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date><![CDATA[2021-09-19 20:15:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-19 14:45:04]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-19 20:15:04]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-19 14:45:04]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[story-of-keeping-ci-pipeline-from-getting-screwed-when-aws-pushes-broken-docker-image-to-docker-hub]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="aws-cli"><![CDATA[aws-cli]]></category>
		<category domain="post_tag" nicename="aws-cli-docker-install-fails"><![CDATA[aws-cli docker install fails]]></category>
		<category domain="post_tag" nicename="aws-cli-docker-issue"><![CDATA[aws-cli docker issue]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[63189900894]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1632062708]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Himiko]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[himikohimi199.9@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[106.206.14.25]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-09-19 20:58:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-09-19 15:28:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That was some good daily dose of knowledge kraken üòÉ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1632065334]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[comment_like_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1632065334]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632065334.836158;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Understanding cron jobs in Kubernetes]]></title>
		<link>https://krakentips.wordpress.com/?p=173</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=173</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Hey all, In this article, lets dig deeper on cron jobs of Kubernetes i.e how to configure them, debugging failed schedules and much more !</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p> Lets start from beginning, <em>what's a cron job  in Kubernetes ?</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A&nbsp;<em>CronJob</em>&nbsp;creates&nbsp;<a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/" target="_blank" rel="noreferrer noopener">Jobs</a>&nbsp;on a repeating schedule.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One CronJob object is like one line of a¬†<em>crontab</em>¬†(cron table) file. It runs a job periodically on a given schedule, written in¬†<a href="https://en.wikipedia.org/wiki/Cron">Cron</a>¬†format. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>What can be done from cronjob ?</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>CronJobs are meant for performing regular scheduled actions such as backups, report generation, and so on. Each of those tasks should be configured to recur indefinitely (for example: once a day / week / month); you can define the point in time within that interval when the job should start.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In our company, we use to do custom analytics and report generation. Lot can be done via cronjobs, you just have to properly structure it, that's it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Key components in a cronjob lifecycle :</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Cronjob</li><li>Job</li><li>replication controller.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p> I stole lot of definitions and info from official docs !, kudos to k8s team and the  person who wrote it !</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>173</wp:post_id>
		<wp:post_date><![CDATA[2021-09-20 22:34:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-20 22:34:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-20 17:04:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to increase the disk size of a node in EKS]]></title>
		<link>https://krakentips.wordpress.com/?p=180</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Hello everyone, if you're one of those people who's struggling to find the answer for the question ? ' Hey can I increase the disk size of worker nodes in EKS ?' well this article could be useful for you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I searched everywhere, could find the answer on the internet. Then I asked couple of other DevOps Engineers and below are the solutions ( not so perfect, but works :D) :</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Manually add new volume to EC2 instance ( node)</strong></li><li><strong>Create a new node-group with desired disk size and move workload there</strong></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Solution 1:  <strong style="font-size:1em;background-color:var(--darkreader-bg--wp--preset--color--background);color:var(--darkreader-text--wp--preset--color--foreground);font-family:var(--font-base, &quot;PT Sans&quot;, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Roboto&quot;, &quot;Oxygen&quot;, &quot;Ubuntu&quot;, &quot;Cantarell&quot;, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif);">Manually add new volume to EC2 instance ( node)</strong> :-</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this to work, you can follow the below steps :</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li></li></ol>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date><![CDATA[2021-09-28 20:02:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-28 20:02:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-28 14:32:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to migrate Node-Group from multi AZ to single AZ in AWS EKS]]></title>
		<link>https://krakentips.wordpress.com/2021/10/11/how-to-migrate-all-your-worker-nodes-from-multiple-az-to-single-az-in-aws-eks/</link>
		<pubDate>Mon, 11 Oct 2021 07:16:58 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","width":394,"height":221,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTa0qub2i0kok0dp1G2VgrnwqV6YeMRqwy2vA&amp;usqp=CAU" alt="" width="394" height="221" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>After reading the above title you maybe thinking why though? moving the complete worker node fleet into single Availability Zone (AZ) is not a good solution when it comes to high availability of your Kubernetes cluster workload.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There's a reason at least why I had this requirement, <strong>Cost optimization in AWS</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you create a EKS cluster, it'll have 3 subnets each correcting to a single AZ i.e 3 AZ in a region. Now for staging / testing clusters the Inter Availability Zone data transfer fees we were getting was a hefty one, which was unnecessary as HA is not needed for the testing environment.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I couldn't find this anywhere else, so with an outage at staging cluster :D ( shhhhh!) I found out that the solution is to create a new node group with AZ mentioned while creating works and any node you spawn in that node group using ASG (Auto Scaling Group) will be in that single AZ only keeping your inter AZ data transfer cost to 0. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><code>eksctl create nodegroup --cluster=staging_cluster  \
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;--region=ap-south-1 \
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--node-zones=ap-south-1a \
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--name=M5.2xlarge_NG \
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--node-type=m5.2xlarge</code></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the above snippet, I'm creating NG in Mumbai Region in AZ ap-south-1a with m5.2xlarge instance.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you want to go with GUI way, then :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1. Go to your cluster in EKS and then click on <strong>Add Node Group</strong> :</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":191,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/10/image.png?w=1024" alt="" class="wp-image-191" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>2. Go with usual flow of giving it a name, taint if required, and IAM role.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3. Select AMI, disk size, instance family etc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>4. In Networking section, by default 3 subnets will be selected, untick 2 of them and keep 1 ( any desired AZ 'a/b/c'). If you're unsure about the name and AZ, you can verify that in VPC &gt; subnets.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":193,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/10/image-1.png?w=1024" alt="" class="wp-image-193" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>That's it, create the node group and all the instances will be spawned in that AZ only.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>¬†You¬†can¬†also¬†do¬†this¬†in¬†a¬†hackish¬†way¬†by¬†editing¬†the¬†ASG(Auto Scaling Group)¬†corresponding¬†to¬†the¬†node¬†group¬†and¬†removing¬†2¬†subnets¬†from¬†there,¬†it¬†works¬†but¬†your¬†node¬†group¬†will¬†become¬†<em>Unhealthy</em>¬†and¬†AWS¬†wont¬†do¬†anything¬†to¬†the¬†node¬†groups¬†which¬†is having¬†health¬†issue.¬†So¬†better¬†to¬†create¬†a¬†new¬†node¬†group.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There's one more way which I found out i.e to use ekctl command line and create from config file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can read more about <em>ekctl </em>and configure it by referring <a href="https://eksctl.io/introduction/">Here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you're going with config file, it should look like below : <code>ap-south-la-NG.yaml</code> :</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: Your_Cluster_Name
  region: ap-south-1

managedNodeGroups:
  - name: demo-nodegroup
    labels: { role: worker-nodes }
    instanceType: m5.xlarge
    desiredCapacity: 1
    volumeSize: 50
    availabilityZones: &#091; ap-south-1a ]
    minSize: 1
    maxSize: 2
    volumeType: gp3
    privateNetworking: true

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Then you can apply using the below command : </p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">eksctl create nodegroup --config-file ap-south-la-NG.yaml</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p><strong>Finally</strong>, once the new Node groups is created, you can scale down your existing node group to <strong>0</strong> so that AWS will drain the nodes gracefully and all your workloads will be moved to newly created node groups.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date><![CDATA[2021-10-11 12:46:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-11 07:16:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-10-11 12:48:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-10-11 07:18:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-migrate-all-your-worker-nodes-from-multiple-az-to-single-az-in-aws-eks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="aws-eks"><![CDATA[aws eks]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[64017770157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1633936619]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[I had an accident !]]></title>
		<link>https://krakentips.wordpress.com/2021/10/12/i-had-an-accident/</link>
		<pubDate>Tue, 12 Oct 2021 16:49:39 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","id":213,"width":585,"height":387,"sizeSlug":"large","linkDestination":"none"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://krakentips.files.wordpress.com/2021/10/pexels-photo-263402.jpeg?w=1024" alt="" class="wp-image-213" width="585" height="387" /><figcaption>Photo by Pixabay on <a href="https://www.pexels.com/photo/ambulance-architecture-building-business-263402/" rel="nofollow">Pexels.com</a></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>So, this will be like first non tech short blog from my side. here it goes .........</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A cool evening, weather was perfect and I thought why not go for a bike ride and have something on the way. Ooopsie bad decision!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There I was, driving at around 50KMPH, all of sudden a cow came in middle of road, that too a black one, it was dark and I couldn't control and I crashed into it, BAM!!!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Cut to 30 min later, I'm in ER of a nearby hospital, had 6 bruises on my left side of my body, with a deep around 6cm cut on my left leg. Got the X-ray results and luckily no fracture and came back home.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2021-10-12 22:19:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-12 16:49:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-10-12 22:19:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-10-12 16:49:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-had-an-accident]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[64073111402]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1634057380]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[It happened again in production !!]]></title>
		<link>https://krakentips.wordpress.com/2021/10/13/it-happened-again-in-production/</link>
		<pubDate>Wed, 13 Oct 2021 15:37:07 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=216</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Previously I have written <a href="https://wp.me/pcknFJ-2F">article</a> about how AWS pushed broken image to Docker hub and we got screwed as we were using <em>latest</em> as image tag.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Welp, this happened again in our CI/CD pipeline as we were using <a href="https://github.com/chartmuseum/helm-push">push</a> plugin from helm and using that to push charts to <a href="https://chartmuseum.com/">chartmuseum</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>How it happened?</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>So we were using the below line to pull the helm push plugin :</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>- helm plugin install https://github.com/chartmuseum/helm-push.git</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And were pushing to Chartmuseum via command : </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>helm push app-name repo-name</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>It turns out that command is not valid and as per their latest (v0.10.0) changes to the plugin, its been renamed to <strong>cm-push</strong> and we gotta use like <code>helm cm-push app-name repo-name</code>. Else we can use the same command with old version of plugin. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Hence our pipeline got screwed and I've fixed by pulling specific version from their repo by using -version argument. It goes like this : </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>helm plugin install https://github.com/chartmuseum/helm-push.git --version v0.9.0
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The better solution to this is to replace the hard-coded version above to GitLab CI variable and update the version from there later.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date><![CDATA[2021-10-13 21:07:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-13 15:37:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-10-13 21:07:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-10-13 15:37:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[it-happened-again-in-production]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="gitlab-helm"><![CDATA[gitlab helm]]></category>
		<category domain="post_tag" nicename="helm"><![CDATA[helm]]></category>
		<category domain="post_tag" nicename="helm-push"><![CDATA[helm push]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[64110677871]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1634139431]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Monitoring K8S resource changes with kubewatch]]></title>
		<link>https://krakentips.wordpress.com/2021/10/15/monitoring-k8s-resource-changes-cluster-with-kubewatch/</link>
		<pubDate>Fri, 15 Oct 2021 15:31:04 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=219</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://github.com/bitnami-labs/kubewatch/raw/master/docs/kubewatch-logo.jpeg" alt="" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>But what's kubewatch ?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/bitnami-labs/kubewatch">kubewatch</a>&nbsp;is a Kubernetes watcher that currently publishes notification to Slack. Deploy it in your k8s cluster, and you will get event notifications in a slack channel.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lets see how we can deploy it to our cluster.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Pre-requisites :</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Kubernetes 1.12+</li><li>Helm 3.1.0</li><li>A slack bot and a slack channel to integrate the bot</li></ul>
<!-- /wp:list -->

<!-- wp:list {"ordered":true} -->
<ol><li>Add Bitnami repo to your helm :</li></ol>
<!-- /wp:list -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">helm repo add bitnami https://charts.bitnami.com/bitnami</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p> 2. Verify that kubewatch chart is available in the repo :</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>demo&gt; helm search repo kubewatch
NAME                    CHART VERSION   APP VERSION     DESCRIPTION
bitnami/kubewatch       3.2.16          0.1.0           Kubewatch </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>3. Customize the values like slack integration and enabling RBAC. If you directly do <em>helm install chart-name </em>you wont get any event notification as RBAC is set to <em>false </em>by default. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>helm show values bitnami/kubewatch &gt; updated-values.yaml</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now edit the yaml file as per your requirement.  Here's what I've changed :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Slack Integration :</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>slack:
enabled: true
channel: "kubewatch"           #your slack channel name
## Create using: https://my.slack.com/services/new/bot and invite the bot to your channel using: /join @botname
##
token: "your slack bot token here"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>RBAC </strong>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>## @section RBAC parameters

## @param rbac.create Whether to create &amp; use RBAC resources or not
##
rbac:
  create: true</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>3. Now lets deploy using the below command :</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>demo&gt; helm install kubewatch bitnami/kubewatch -f .\updated-values.yaml</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>4. Verify that kubewatch pod is running :</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>demo&gt; kubectl get pod
  
NAME       READY STATUS RESTARTS AGE
kubewatch-c86656645-8znwk 1/1 Running 0 2m19s</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>5. To test it out, lets create a nginx deployment with command :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>kubectl create deploy nginx --image=nginx</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>6. Check your slack channel for notifications :</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":227,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/10/image-2.png?w=911" alt="" class="wp-image-227" /></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The indication is as follows :</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Green : for resources created</li><li>Yellow : for resources updated</li><li>Red : for resources deleted</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You can customize the notification a lot, for example, which namespace to monitor to ( default value is all namespace) , which resource to monitor to like deployment, pod, PV, service etc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can just edit the configmap : <strong>kubewatch-config</strong> and change the resources to monitor.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy monitoring !!!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date><![CDATA[2021-10-15 21:01:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-15 15:31:04]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-10-16 11:11:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-10-16 05:41:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[monitoring-k8s-resource-changes-cluster-with-kubewatch]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="helm"><![CDATA[helm]]></category>
		<category domain="post_tag" nicename="kubernetes-monitoring"><![CDATA[kubernetes monitoring]]></category>
		<category domain="post_tag" nicename="kubewatch"><![CDATA[kubewatch]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1634311866]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[64187451503]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Dynamic PV in Kubernetes feat. EKS (EBS)]]></title>
		<link>https://krakentips.wordpress.com/2021/11/13/dynamic-pv-in-kubernetes-feat-eks-ebs/</link>
		<pubDate>Sat, 13 Nov 2021 14:43:38 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=237</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","width":347,"height":399,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://symbols.getvecta.com/stencil_73/88_amazon-eks-icon.e573f9f8d7.svg" alt="" width="347" height="399" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This article doesn't explain what are PV and PVC's in Kubernetes. For that you can refer the official Docs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What does volume resizing mean ( for PV in Kubernetes)  ? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Its the ability to increase the PV size ( EBS volume behind the scene ).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Up until v1.16 EKS, you can just increase any ( PV ) EBS volume size just by running command like</strong> : <code>kubectl edit pv your_PV</code> <strong>and just change the size, it used to work since you have storage class  of</strong> <code>kubernetes.io/aws-ebs</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can't resize your PV just by changing the size in the manifest file ( if &gt; v1.17 and doesn't have volume controller.) </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now, what should you do as a Kubernetes admin if you wanna resize your PV with above mentioned version ?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Simple, Kubernetes team has a new tool called <strong>ebs-csi controller</strong>. What does it do? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver provides a CSI interface that allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can install the ebs-csi driver by referring to AWS <a href="https://docs.aws.amazon.com/eks/latest/userguide/ebs-csi.html">document</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you install it, you should see the pods like below : </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":243,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/11/screenshot-2021-11-13-at-7.38.44-pm-1.png?w=1024" alt="" class="wp-image-243" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>And the ebs-csi-controller pod logs should look like : </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":244,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/11/screenshot-2021-11-13-at-7.43.07-pm.png?w=1024" alt="" class="wp-image-244" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Looks good, now, for a test, lets edit a PV and increase its size. In my example, I'll just increase the alert-manager PV, Its initial size was 2GB. I'll increase it to 3GB.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":246,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/11/screenshot-2021-11-13-at-7.46.10-pm.png?w=584" alt="" class="wp-image-246" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If you are thinking how did I beautify Kubernetes editing ? all thanks to <a href="https://k8slens.dev">Lens</a> IDE.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>lets verify the PV size now :</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":248,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/11/screenshot-2021-11-13-at-7.49.53-pm.png?w=968" alt="" class="wp-image-248" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here comes the real test to see if the actual EBS volume is resized or not. For that let's copy the volume id and search that volume size in AWS console or via AWS cli to verify the disk size.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To get the volume id of a PV, run the below command :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>kubectl describe pv PV_NAME  | grep Volume</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now if you prefer cli, lets verify from AWS CLI: </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":251,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/11/screenshot-2021-11-13-at-7.56.00-pm.png?w=1024" alt="" class="wp-image-251" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Tada !!! it worked !!!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date><![CDATA[2021-11-13 20:13:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-11-13 14:43:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-11-13 20:13:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-11-13 14:43:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dynamic-pv-in-kubernetes-feat-eks-ebs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="aws-eks"><![CDATA[aws eks]]></category>
		<category domain="post_tag" nicename="kubernetes"><![CDATA[kubernetes]]></category>
		<category domain="post_tag" nicename="pv"><![CDATA[pv]]></category>
		<category domain="post_tag" nicename="pvc"><![CDATA[pvc]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d090f9762f9a22dcd22508010f08488b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[65310489028]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1636814620]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[A closer look at Cluster Autoscaler for EKS]]></title>
		<link>https://krakentips.wordpress.com/2021/11/13/a-closer-look-at-cluster-autoscaler-for-eks/</link>
		<pubDate>Sat, 13 Nov 2021 16:10:26 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=258</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","width":587,"height":230,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://symbols.getvecta.com/stencil_73/87_amazon-eks.4a2c5ad771.svg" alt="" width="587" height="230" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If you're wondering why do I write about AWS that much, that's because AWS is the cloud on which I spend most of my work hours in <a href="https://skit.ai">Skit.ai</a> as a DevOps Engineer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ok, let's take a look at what cluster autoscaler is and how does it work?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Cluster Autoscaler</strong> is a tool that automatically adjusts the size of the Kubernetes cluster when one of the following conditions is true:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>there are pods that failed to run in the cluster due to insufficient resources.</li><li>there are nodes in the cluster that have been underutilized for an extended period of time and their pods can be placed on other existing nodes.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For anyone who's going to implement autoscaler in their EKS cluster, please read this <a href="https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md">FAQ</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The setting up of autoscaler in EKS is perfectly written by AWS document <a href="https://docs.aws.amazon.com/eks/latest/userguide/cluster-autoscaler.html">Here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>once, things are set up, the logs should look like below :</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":264,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/11/screenshot-2021-11-13-at-9.00.41-pm.png?w=1024" alt="" class="wp-image-264" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now if you're getting this, then it means the setup is clean. If we take a closer look at logs, it says node minimum size reached and cant scale down anymore.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's understand scaling up and scale down criteria and it's working. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Scale down criteria &amp; working : </strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Every 10 seconds (configurable by&nbsp;<code>--scan-interval</code>&nbsp;flag), if no scale-up is needed, Cluster Autoscaler checks which nodes are unneeded. A node is considered for removal when&nbsp;<strong>all</strong>&nbsp;below conditions hold:</li><li>The sum of cpu and memory requests of all pods running on this node is smaller than 50% of the node's allocatable. </li><li>All pods running on the node (except these that run on all nodes by default, like manifest-run pods or pods created by daemonsets) can be moved to other nodes. </li><li>It doesn't have scale-down disabled annotation (see&nbsp;<a href="https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-can-i-prevent-cluster-autoscaler-from-scaling-down-a-particular-node">How can I prevent Cluster Autoscaler from scaling down a particular node?</a>)</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>If a node is unneeded for more than 10 minutes, it will be terminated.  Cluster Autoscaler terminates one non-empty node at a time to reduce the risk of creating new unschedulable pods. The next node may possibly be terminated just after the first one, if it was also unneeded for more than 10 min and didn't rely on the same nodes in simulation (see below example scenario), but not together. Empty nodes, on the other hand, can be terminated in bulk, up to 10 nodes at a time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What happens when a non-empty node is terminated? As mentioned above, all pods should be migrated elsewhere. Cluster Autoscaler does this by evicting them and tainting the node, so they aren't scheduled there again.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also, you should consider the below point : </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>If there's a node which is under-utilized but that node counts towards minimum node group size, then CA wont terminate that node and the logs will be similar to above screenshot.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Scale-up criteria &amp; working</strong> :</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Scale-up creates a watch on the API server looking for all pods. It checks for any unschedulable pods every 10 seconds (configurable by¬†<code>--scan-interval</code>¬†flag). A pod is unschedulable when the Kubernetes scheduler is unable to find a node that can accommodate the pod. For example, a pod can request more CPU that is available on any of the cluster nodes. </li><li>Unschedulable pods are recognized by their PodCondition. Whenever a Kubernetes scheduler fails to find a place to run a pod, it sets "schedulable" PodCondition to false and reason to "unschedulable". If there are any items in the unschedulable pods list, Cluster Autoscaler tries to find a new place to run them.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Testing the CA : </strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Let's assume you got 2 <em>t3.medium</em> node and the <em>min</em> value of nodegroup is 2 with <em>max</em> value set to 5.</li><li>Run a nginx deployment with 500 replicas to see if cluster autoscaler scales up the nodes.. The command would be :<ol><li><code>kubectl create deployment cluster-killer  --image=nginx --replicas=500</code></li></ol></li><li>2 nodes of that size can't handle 500 pods of nginx, so they should be in pending state and CA scans for pending state pods every 10 seconds which should start couple of nodes within minutes. You can verify from command : <code>kubectl get node</code></li><li>Once all pods are scheduled, to test scale down, you can either delete the deployment using : <code>kubectl delete deployment cluster-killer</code> or scale down the replicas to zero with command : <code>kubectl scale deployment cluster-killer --replicas=0</code></li><li>If you refer the logs of cluster autoscaler now, it will mention that X node is uneeded for X min etc.</li><li>The cool down period by default is 10 min so, after that time, it'll apply taint on that node with name DeletionCandidateOfClusterAutoscaler and ToBeDeletedByClusterAutoscaler and removes the nodes. It looks like below: </li></ol>
<!-- /wp:list -->

<!-- wp:image {"id":272,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/11/00d9d158-0d67-4179-88f2-c99111894dff.png?w=965" alt="" class="wp-image-272" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date><![CDATA[2021-11-13 21:40:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-11-13 16:10:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-11-13 21:40:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-11-13 16:10:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-closer-look-at-cluster-autoscaler-for-eks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="post_tag" nicename="aws-eks"><![CDATA[aws eks]]></category>
		<category domain="post_tag" nicename="cluster-autoscaler"><![CDATA[cluster autoscaler]]></category>
		<category domain="post_tag" nicename="eks"><![CDATA[EKS]]></category>
		<category domain="post_tag" nicename="eks-ca"><![CDATA[EKS CA]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[65313138777]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1636819828]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Himi]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[himi@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[223.231.159.236]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-11-13 22:43:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-11-13 17:13:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[üôå]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1636950823]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1636950823.712842;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"tanmaybhat24";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636823580.758258;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1636950823]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636828947.968805;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Lets look at cost optimization for EKS]]></title>
		<link>https://krakentips.wordpress.com/?p=274</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=274</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>So you Might be running multiple clusters in AWS and after a certain time cost does become a big thing to handle and mainly keeping it under the limit is a big challenge and in this article, we'll see some of the ways in which we can save cost in AWS.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="1-ebs-volumes">1. EBS volumes</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To be honest, It's one of the most under-valued part of EKS cost optimization. I've never seen anyone talking about it in general. Let's see more details about it.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Whenever you create a node group ( managed) in EKS, AWS creates an EC2 machine ( worker nodes) with X amount of EBS volume size with type: <strong>GP2</strong> (default) . What most people don't know is that there's a newer generation of volume type called <strong>GP3</strong>. The Adtantage of GP2 over GP2 is its ~20% cheaper and the IOPS of the volume can be changed according to the requirement which cannot be possible with GP2. So you get savings plus adjustable performance tunings.</li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li>If you're using EBS as storage medium for Persistane Volumees in Kubernetes (mos widely used) you should revist the volume type mentioned in your <strong>Storage Class</strong>. The GP3 support is fairly new ( supports v.1.18 &amp; newer) and you should use that instead of old GP2 so that any new PV created by Kubernetes will be GP3, hence your savings.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 id="2-cluster-autoscaler-ca">2. Cluster Autoscaler ( CA)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>CA is one of the most widely used recommendations for cost optimization. Now What's CA, how to install it and use it is mentioned in detail in my previous post (<a href="https://krakentips.wordpress.com/2021/11/13/a-closer-look-at-cluster-autoscaler-for-eks/">Link</a>).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's very necessary that you tune the cluster auto-scaler according to your environment flags/parameters such as cool-down period, node not-ready period, etc. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once that's done, according to your scaling strategy, you should use the appropriate values for <strong>Min size</strong> and <strong>Max size</strong> in node groups. Keep in mind that if you give an unnecessary larger value for min node group size, CA won't scale down as it's dependant on the min size of the node group.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You should combine <strong>HPA</strong> ( horizontal pod autoscaling) with CA. HPA can be set to either memory threshold-based autoscaling or CPU-based scaling.  </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, the scenario will be like your App receives high traffic, CPU/Memory fo the existing pod goes up, hits the defined limit, HPA senses that through metrics server, increases replica of the deployment to server the demand and if the pods cant be scheduled with available resources, asks CA to spin up more ec2 instances and scheduled pod there. Once the traffic decreases, scale down the pods &amp; nodes automatically.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3. right-sizing instances</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>4. spot instances</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>5. correctly difinhg limit and request</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date><![CDATA[2021-11-17 23:42:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-11-17 23:42:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-11-17 18:12:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Scheduling pods in both Spot and On-demand nodes in EKS]]></title>
		<link>https://krakentips.wordpress.com/2021/11/19/scheduling-pods-in-both-spot-and-on-demand-nodes-in-eks/</link>
		<pubDate>Thu, 18 Nov 2021 20:16:58 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=285</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","width":415,"height":437,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://symbols.getvecta.com/stencil_9/10_ec2-spot-instance.a45511ac18.svg" alt="" width="415" height="437" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You may have faced this scenario where you wanna keep scaling up apps &amp; nodes but also under-keeping costs at a limit.  Spot Instance is the way for that task. Now,  how do we do that? let's see.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="background">Background</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As you know there are mainly 2 types of instances in AWS, called <strong>On-demand</strong> and <strong>Spot</strong>. As the name suggests On-demand is priced highest because it's literally on demand from your side to AWS about node requirement. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Spot instances are a bit different. Spot instance is the unused capacity in AWS cloud sitting idle and AWS gives that to you at an extremely low price for like <strong>80-90%</strong> cheaper than on-demand. The difference being whenever AWS needs the capacity to handle on-demand, it <em>takes back the spot instances with ~2 min notice</em> via notification to you.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="node-groups">Node groups</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now that we've learned about what spot offers, it makes total sense to include that in your workload to save quite a lot of money. So let's learn about the node groups for on-demand and spot.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5 id="designing-node-groups">Designing node groups :</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Since spot can go down anytime, you should always run your critical workloads in on-demand instances.</li><li>All stateful- sets should run in on-demand instances.</li><li>Have multiple nodegroups for spot so that you can maximize chance of getting spot instances.</li><li>Use CA for scaling up / down.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 id="real-world-scenario">Real-world scenario </h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now, let's say you have critical apps running in on-demand NG and other cronjobs or monitoring stacks are in spot NG.  If you wanted to schedule pods with the below architecture I  got the answer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Required architecture</strong>: If your app has 8 replicas, 4/5 of them should run in on-demand NG and 3/4 of them in spot NG such that even if the spot goes down, ondemand can handle the load until the new spot comes in and takes the load. In this way, you'll have 'Zero Downtime'.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now for the above problem, there isn't a straightforward or clear-cut solution. But I'll explain the way I've implemented it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5 id="solution">Solution:</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once both the NG are created, let's take a look at the label of a spot node.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"fontSize":"small"} -->
<pre class="wp-block-code has-small-font-size"><code>kubectl describe no ip-100-45-51-226.ap-south-1.compute.internal | grep SPOT

eks.amazonaws.com/capacityType=SPOT</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Any node created by spot will have the above label. and any node with ondemand will have label : <code>eks.amazonaws.com/capacityType=ON_DEMAND</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once, they are done, you can create a sample Nginx deployment with the below configs: </p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 10
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 40
            preference:   
              matchExpressions:
              - key: eks.amazonaws.com/capacityType
                operator: In
                values:
                - SPOT
          - weight: 60
            preference:
              matchExpressions:
              - key: eks.amazonaws.com/capacityType
                operator: In
                values:
                - "ON_DEMAND"
      containers:
      - image: nginx
        name: nginx</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>All the other configs are pretty easy to understand and come under basic Kubernetes concepts. Since nodes created by spot and on-demand NG will have the above-mentioned labels, we can utilize that hand request scheduler to try its best effort to schedule 40% of pods in this deployment to SPOT and 60% to ON_DEMAND.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can change the above weight as per your needs. Once the above YAML is deployed, let's take a look at the way pods are scheduled. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":302,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/11/screenshot-2021-11-19-at-1.36.57-am.png?w=1024" alt="" class="wp-image-302" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In my case, nodes with names <strong>25</strong> and <strong>226</strong> are Spot instances. If calculated correctly,  6 pods are running in on-demand and 4 pods are running in spot NG which is exactly as we expected.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>NOTE: This may not be always exactly the ratio you need since the scheduler gives pods to nodes on a best effort basis.  But it'll be almost a similar result.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy k8ing !!!!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>285</wp:post_id>
		<wp:post_date><![CDATA[2021-11-19 01:46:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-11-18 20:16:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-11-19 01:46:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-11-18 20:16:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scheduling-pods-in-both-spot-and-on-demand-nodes-in-eks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="aws-eks"><![CDATA[aws eks]]></category>
		<category domain="post_tag" nicename="eks"><![CDATA[EKS]]></category>
		<category domain="post_tag" nicename="eks-spot-pod"><![CDATA[eks spot pod]]></category>
		<category domain="post_tag" nicename="node-group"><![CDATA[node group]]></category>
		<category domain="post_tag" nicename="spot"><![CDATA[spot]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[65510975731]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1637266619]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Himi]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[himi@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[223.186.21.168]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-11-21 00:31:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-11-20 19:01:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[üëèüëè]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1637434904]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637434905.072561;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1637481118]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1637481117.334504;s:5:"event";s:17:"status-unapproved";s:4:"user";s:12:"tanmaybhat24";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1637481118.21541;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"tanmaybhat24";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Journey to the Kubernetes world with Digital Ocean]]></title>
		<link>https://krakentips.wordpress.com/2021/12/11/journey-to-the-kubernetes-world-with-digital-ocean/</link>
		<pubDate>Sat, 11 Dec 2021 10:08:19 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=307</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","id":365,"width":458,"height":366,"sizeSlug":"large","linkDestination":"none"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://krakentips.files.wordpress.com/2021/12/vlz.png?w=500" alt="" class="wp-image-365" width="458" height="366" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Hey all! It's been a long time since I haven't written a blog about Kubernetes. So I was wandering in r/devops in Reddit and saw a post where the digital ocean is hosting a Kubernetes challenge and guess what they're giving away free credits of $ 120 to try it out free!!!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This blog is written in multiple sections from steps to apply to steps to deploy your app in Digital Ocean Kubernetes via CI/CD. Let's get started!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="challenge-and-how-to-apply"><strong>Challenge and how to apply</strong> :</h3>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>Link of the challenge page : <a href="https://www.digitalocean.com/community/pages/kubernetes-challenge">Here</a></li><li>Pick one challenge from the list mention in above link based on your knowledge.</li><li>Create a GitHub or GitLab repo for your project</li><li>Fill out the&nbsp;<a href="https://docs.google.com/forms/d/e/1FAIpQLSdil-lIxbh7W08zourmlt2pMWP8Sn8y3u6hhAILR9eiqhy-Ww/viewform">code challenge form</a>&nbsp;to get DigitalOcean credits for your project</li><li>Join the #kubernetes-challenge channel in the&nbsp;<a href="https://discord.com/invite/7AHdNue">DigitalOcean Deploy Discord</a></li><li>Complete your challenge</li><li>Write about what you‚Äôve built and share it on a blog or in your project readme</li><li>Make a pull request against the&nbsp;<a href="https://github.com/do-community/kubernetes-challenge">Kubernetes Challenge Github Repo</a>&nbsp;with information about your project&nbsp;</li><li>Let DO know you‚Äôve completed your challenge by&nbsp;<a href="https://docs.google.com/forms/d/e/1FAIpQLSe-CT6ynhORAL04GqsvrvYn8d_6bUJuHUsMNFRG8L9mVxE1IA/viewform">filling out this form</a>.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Now that we've applied let's take a look at one of the challenges I chose :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Deploy a GitOps CI/CD implementation</strong><br>GitOps is today the way you automate deployment pipelines within Kubernetes itself, and&nbsp;<a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD</a>&nbsp;is currently one of the leading implementations. Install it to create a CI/CD solution, using&nbsp;<a href="https://github.com/features/actions">Github Actions </a>for actual image building.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="1-cluster-creation-setup">1. Cluster Creation &amp; setup :</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Sign in to your DO console at: <a href="https://cloud.digitalocean.com/">https://cloud.digitalocean.com/</a></li><li>Click on NEW button and create a Kubernetes cluster with default values.</li><li>You can customize the location of cluster nearest to your location to avoid altency issues to API server.</li><li>Once you submit, it'll take around 10-15 min for the worker nodes and API server to become ready.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":338,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/12/image.png?w=1024" alt="" class="wp-image-338" /></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click on the Actions button and download the kubeconfig file.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":340,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/12/image-1.png?w=969" alt="" class="wp-image-340" /></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Once you download, install kubectl binary by following steps in the <em>Getting started</em> section of <em>overview </em>tab.</li><li>Once, kubectl in installed in your local, you can save / move the config file downloaded to your <code>~/.kube/config</code> location.</li><li>Now, you can connect to your API server, test it by running :  <code>kubectl get node -o wide</code></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":342,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/12/image-2.png?w=1024" alt="" class="wp-image-342" /></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3 id="2-project-setup">2. Project setup</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Clone this repository using below command :</li><li>g<code>it clone https://github.com/tanmay-bhat/DigitalOcean-Kubernetes-Challenge-argoCD</code></li><li>This project contains below:<ul><li>go app</li><li>Dockerfile</li><li>github actions file ( CI)</li><li>Kubernetes manifest files</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Let's Look mainly <a href="https://github.com/tanmay-bhat/DigitalOcean-Kubernetes-Challenge-argoCD/tree/main/kustomize/base">kustomize/base</a> :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here, Deployment.yaml file contains the deployment kind YAML file.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":347,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/12/image-3.png?w=726" alt="" class="wp-image-347" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Notice the image registry I'm using is the <em>Digital Ocean registry</em> itself and not the mostly used Docker Hub.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The ImagePullSecrets has a name: Tanmay Bhat. This is the Kubernetes secret which has the DIgital OCean registry credentials which we will use to pull the image.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now let's look at our Github actions config file located at <a href="https://github.com/tanmay-bhat/DigitalOcean-Kubernetes-Challenge-argoCD/tree/main/.github/workflows">.github/workflows</a> :</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"yaml"} -->
<pre class="wp-block-syntaxhighlighter-code">name: Go

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
      
    - name: Check out code
      uses: actions/checkout@v2
        
    - name: Extract Git Tag
      run: echo "GIT_TAG=${GITHUB_REF/refs\/tags\//}" &gt;&gt; $GITHUB_ENV
 
    - name: Login to Digitalocean
      uses: docker/login-action@v1
      with:
        registry: registry.digitalocean.com
        username: ${{ secrets.DIGITAL_OCEAN_TOKEN }}
        password: ${{ secrets.DIGITAL_OCEAN_TOKEN }}


    - name: push image to digitalocean
      run: |
        docker build -t registry.digitalocean.com/tanmaybhat/saymyname:${{ env.GIT_TAG }} .
        docker push registry.digitalocean.com/tanmaybhat/saymyname:${{ env.GIT_TAG }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Extract Git Tag
      run: echo "GIT_TAG=${GITHUB_REF/refs\/tags\//}" &gt;&gt; $GITHUB_ENV

    - name: update image tag in manifest
      uses: imranismail/setup-kustomize@v1
    - run: |
          cd kustomize/base
          kustomize edit set image registry.digitalocean.com/tanmaybhat/saymyname:${{ env.GIT_TAG }}
    
    - name: Commit files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "update image tag to ${{ env.GIT_TAG }}"

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}        </pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>I'm gonna explain the section here since the main goal of this article is to do CI/CD :</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>The <em>on </em>section says trigger this piepline if the chnages has been pushed to <strong>Main </strong>branch with a tag in format : vx.x.x ( i.e v1.0.0 etc)</li><li>On each tag push, pieplien will run 2 jobs. <strong>Build </strong>and <strong>Deploy</strong>.</li><li>In <em><strong>Build </strong></em>section, the steps will run on ubuntu image.</li><li><em>Check out code</em> step uses pre-build action <code>actions/checkout@v2</code> to clone current repository into the piepline container i.e ubuntu.</li><li><em>Extract Git Tag</em> is used to get the latest tag pusued to main branch and store it in th environmental variable GIT_TAG.</li><li>In <em>Login to Digitalocean</em>, since we need to push our build docker images to a private registry like Digital  Ocean, I'm using docker login action to auttenticate to the DO registry.</li><li>In <em>push image to digitalocean</em>, I'm buidling the docker image and tagging it to latest pushed tag version and pushing to my registry.</li><li>Next comes, the <strong><em>Deploy </em></strong>section. here again I'm using ubuntu as base image and again getting the repository from main branch and extracting tag version from the repositiry.</li><li>Once that is done, I'll use a tool called <strong>Kustomize </strong>to update my manifest file's docker image tag to the latest tag version.</li><li>If you're using helm charts only but not kustomize with Helm, you need to use Sed command and update the image tag in manifest file ( deployment.yaml).</li><li>Later, I'm doing the commit of latest tag edit and pushing the changes back to my repo.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>So, to sum up, what the exact pipeline does whenever a new tag is pushed to main branch : </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>clone the repository, build the docker image, tag it and push it to registry.</li><li>update the tag in manifest file and push it back to gthe repository.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You might have this question, Tanmay, this is just CI, where's CD ? well, that's the magic ArgoCD solves for us. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="3-argocd">3. ArgoCD</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>1. Setup ArgoCD by running the below commands :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>kubectl create namespace argocd </code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2. Once done, you can verify its running status by running the command </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":354,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/12/image-4.png?w=895" alt="" class="wp-image-354" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>3. Next step is to retrieve the password of argocd. For that, run : </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>4. By default argocd service type will be ClusterIP. That means you cant access argocd outside of your cluster. So, Let's change that to LoadBalancer by running : </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>5. Now, wait for couple more minutes for LoadBalancer to start in Digital Ocean and get the endpoint of it by running :</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":356,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/12/image-5.png?w=1024" alt="" class="wp-image-356" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>6. Open the external IP in your browser and voila, you should see argocd UI login page. Login with username: admin &amp; password got from step 3.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="configure-argocd-for-cd">Configure ArgoCD for CD :</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>1. Once, logged in to argoCD UI, click on <em>new app</em> and set the below values: </p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">application name : demo-argocd
Project : default
Sync Policy : Automatic
Repository URL : &lt;GITHUB REPO URL OF YOUR PROJECT&gt;
Rivision : HEAD
Path : kustomize/base
Destination Cluster : https://kubernetes.default.svc
Namespace : default</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Click create and see your app glowing in your cluster.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":361,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/12/image-6.png?w=1024" alt="" class="wp-image-361" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>the ArgoCD magic here is it watches for any new changes to your repo every 3 minutes ( default ) and new changes will be auto-applied in your cluster.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>See the comment that says: update the tag to v1.0.12 ? that was my last commit. If a new tag is committed, here's how it's gonna update and look </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":362,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/12/image-7.png?w=1024" alt="" class="wp-image-362" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Conclusion: I found DO Kubernetes to be very easy to set up and straightforward. From click to integrate Registry to a Kubernetes cluster, easy cluster creation and scaling up.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date><![CDATA[2021-12-11 15:38:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-12-11 10:08:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-11 15:39:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-11 10:09:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[journey-to-the-kubernetes-world-with-digital-ocean]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="argocd"><![CDATA[argocd]]></category>
		<category domain="post_tag" nicename="cicd"><![CDATA[cicd]]></category>
		<category domain="post_tag" nicename="digital-ocean"><![CDATA[digital ocean]]></category>
		<category domain="post_tag" nicename="kubernetes"><![CDATA[kubernetes]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[66380971904]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1639217302]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[A tale of EC2 connectivity issue]]></title>
		<link>https://krakentips.wordpress.com/2021/12/11/a-tale-of-ec2-connectivity-issue/</link>
		<pubDate>Sat, 11 Dec 2021 12:28:40 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=373</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":375,"sizeSlug":"full","linkDestination":"none"} -->
<figure class="wp-block-image size-full"><img src="https://krakentips.files.wordpress.com/2021/12/pexels-photo-764880.jpeg" alt="" class="wp-image-375" /><figcaption>Photo by Bob  Price on <a href="https://www.pexels.com/photo/man-walking-on-floor-764880/" rel="nofollow">Pexels.com</a></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This happened 3 days ago. I received a message from one of our ML engineers that he can't access the EC2 server in the us-east-1 region. I asked him about the error message and he said ssh is giving a time-out error.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, I tried connecting to the server via EC2 connect feature ( web shell) that AWS provides, and even that said connection timed out.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tried telnet to the endpoint and was the same also.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I thought maybe the server may be struck due to overload and restarted it. But the state was still the same once it came up. I saw the metrics of the server via Cloudwatch and everything was fine, saw system logs also and even that looked good.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Curiously opened <a href="https://status.aws.amazon.com/"></a><a href="https://status.aws.amazon.com/">https://status.aws.amazon.com/</a> and saw that us-east-1 Region is having an outage.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Being a Reddit fan, opened r/sysadmin and I could see people all over the world complaining about AWS being down in that region and 1000's of memes on AWS. I told myself this could be mostly due to the AWS outage and I'll see once they fix it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Cut to the next day because the outage took 19 long hours to fix the outage. long live SLA!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I was still not able to connect to the instance and it was still same. After digging for X time, turns out the issue was with the subnet in which EC2 was launched. Someone mistakenly attached NAT gateway to the public subnet instead of the internet gateway. Updated the correct config in the Route-table of the subnet and it worked.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One tiny missing detail can totally mess your mind up.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another day of learning :D</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Happy devopsing !!!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>373</wp:post_id>
		<wp:post_date><![CDATA[2021-12-11 17:58:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-12-11 12:28:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-11 18:00:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-11 12:30:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-tale-of-ec2-connectivity-issue]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="post_tag" nicename="ec2"><![CDATA[ec2]]></category>
		<category domain="post_tag" nicename="outage"><![CDATA[outage]]></category>
		<category domain="post_tag" nicename="ssh"><![CDATA[ssh]]></category>
		<category domain="post_tag" nicename="timeout"><![CDATA[timeout]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="us-east-1"><![CDATA[us-east-1]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[66384671717]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1639225722]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Using Kaniko to build and push images through Gitlab-CI to ECR]]></title>
		<link>https://krakentips.wordpress.com/2021/12/12/using-kaniko-to-build-and-push-images-through-gitlab-ci-to-ecr/</link>
		<pubDate>Sun, 12 Dec 2021 06:58:22 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=380</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://raw.githubusercontent.com/GoogleContainerTools/kaniko/master/logo/Kaniko-Logo.png" alt="" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Though this seems like an easy straight forward task, it's not by referring to the docs, trust me!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Until today in my Gitlab CI, I used to use aws-cli image and later install amazon-linux extras install docker and then use DIND service to build docker images through Gitlab-CI. that will change from today. I learned about the tool called Kaniko from Google which is built to simplify the docker build process without using Docker daemon hence not giving root-level privileges to the runner hence security says top-notch during the build process.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>From Kaniko's doc :</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>kaniko is a tool to build container images from a Dockerfile, inside a container or Kubernetes cluster.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>kaniko doesn't depend on a Docker daemon and executes each command within a Dockerfile completely in userspace. This enables building container images in environments that can't easily or securely run a Docker daemon, such as a standard Kubernetes cluster.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's see how to achieve this in our pipeline. For simplicity, I'll be using Gitlab CI in this example. You can use circle CI or GitHub actions or anything you like (a little bit of modification required ).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Prerequisites:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>AWS IAM credential ( Access-key and Secret-key) with ECR full access.</li><li>Bit of time to implement the below üòÄ</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 id="setup-of-aws-credentials">Setup of AWS credentials :</h4>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>Go to CI-CD settings of your project and set the below variables with appropriate values:</li></ol>
<!-- /wp:list -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">AWS_ACCESS_KEY_ID=&lt;your access key&gt;
AWS_SECRET_ACCESS_KEY=&lt;your secret key&gt;
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:heading {"level":4} -->
<h4 id="gitlab-ci">Gitlab-CI :</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The GitLab CI file should look like below :</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"yaml"} -->
<pre class="wp-block-syntaxhighlighter-code">#base image in which all stages are executed

image: alpine
stages:
  - build_and_push

build and push docker image:
  stage: build_and_push
  only:
    variables:
        - $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
  variables: 
    AWS_DEFAULT_REGION: REGION_NAME
    CI_REGISTRY_IMAGE: YOUR_ACCOUNT_ID.dkr.ecr.REGION_NAME.amazonaws.com/REPO_NAME
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    -  echo "{\"credsStore\":\"ecr-login\"}" &gt; /kaniko/.docker/config.json
    - &gt;-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Let's look at the above pipeline in detail :</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>We're using the base image as alpine.</li><li>We have one stage which is will build the Dockerfile and push to ECR using Kaniko</li><li>As we have mentioned <em>only</em> constraint, the pipeline will only trigger when a new tag is pushed to Master branch.</li><li>Next, we have 2 variables, in which we're defining the default AWS region and our Registry address of ECR. ( please update with your values)</li><li>Next, we're using the Kaniko base image to build run the scripts mentioned and build our image.</li><li>Then we're making a docker folder that will have the registry to push credentials.</li><li>Note that ECR regular login is a bit different than other container registries like Quay or GCR.</li><li>You won't get the regular username and password for this repo from AWS side. You must know that to log in to ECR, you need to run <code>aws ecr get-login</code> command which will give an authentication token that has a TTL of 12 hours, which doesn't work in our case.</li><li>Luckily was has created a new ECR login provider extension that will work through IAM permissions.</li><li>Kaniko has built-in support for that provider, so you just need to add the variable of AWS creds in GitLab CI and Kaniko will take care of the rest. ( magic !)</li><li>Then we provide Kaniko the path to Dockerfile which will be inside our current project, hence the use of CI_PROJECT_DIR which is a pre-defined variable from GitLab CI points to the current project context.</li><li>Then I'm tagging the image with the latest tag from the repository and pushing to the ECR.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Happy CI/CDing !!!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Reference :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/GoogleContainerTools/kaniko">https://github.com/GoogleContainerTools/kaniko</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://gist.github.com/tanmay-bhat/6bc6d6034644ef010d841ea8373a41d6">https://gist.github.com/tanmay-bhat/6bc6d6034644ef010d841ea8373a41d6</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>380</wp:post_id>
		<wp:post_date><![CDATA[2021-12-12 12:28:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-12-12 06:58:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-12 18:57:45]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-12 13:27:45]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-kaniko-to-build-and-push-images-through-gitlab-ci-to-ecr]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="post_tag" nicename="aws-eks"><![CDATA[aws eks]]></category>
		<category domain="category" nicename="ci-cd"><![CDATA[CI-CD]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="post_tag" nicename="gitlab"><![CDATA[gitlab]]></category>
		<category domain="post_tag" nicename="gitlab-ci"><![CDATA[gitlab-ci]]></category>
		<category domain="post_tag" nicename="kaniko"><![CDATA[kaniko]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9f92b186458a1efc111e83cce499664a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[66414294000]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1639292304]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Hosting the Chartmuseum in Digital Ocean Spaces]]></title>
		<link>https://krakentips.wordpress.com/2021/12/12/hosting-the-chartmuseum-in-digital-ocean-space/</link>
		<pubDate>Sun, 12 Dec 2021 15:56:48 +0000</pubDate>
		<dc:creator><![CDATA[tanmaybhat24]]></dc:creator>
		<guid isPermaLink="false">https://krakentips.wordpress.com/?p=388</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":399,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/12/vlz-1.png?w=500" alt="" class="wp-image-399" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Most DevOps engineers who use Chartmuseum to store/host their helm charts use S3 as their storage medium. Well, I wanted to try Digital Ocean spaces as its S3 compatible storage option.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Well, there's an obvious reason why to use S3 in the first place. Beautiful integration with AWS other services, cheap, easy to access, versioning, MFA delete protection etc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, if you're an early developer / DevOps engineer or in a small startup who doesn't wanna go through 1000 configurations in AWS just to create one single storage bucket in the cloud and again go through 1000 more security hurdles in case you want this bucket to be public, you should use DO Spaces. I'll list down why :</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Super easy to set up.</li><li>Damn cheap. $5 for 250GB storage.</li><li>One-click public/private button.</li><li>Easy to integrate CDN if you have any.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>That being said, Let's look at how we can utilize Spaces as an AWS S3 replacement to host our helm charts.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="create-spaces">Create Spaces :</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Log in to your console and click on Spaces and select <em>Create spaces for $5</em>.</li><li>The name has to be unique and make the <em>permission</em> (<strong>File Listing)</strong> private.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":401,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/12/d1-1.png?w=1024" alt="" class="wp-image-401" /></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Once done, you should have the endpoint of the spaces created like :</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":402,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://krakentips.files.wordpress.com/2021/12/d2.png?w=1024" alt="" class="wp-image-402" /></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Once, done, go to API section and create Access keys for Spaces.</li><li>Please note that the <em>secret key</em> will be displayed only once and hence keep it safe copied somewhere.</li><li>With that said, you're ready to move to the next step.</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4 id="install-chartmuseum">Install Chartmuseum</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Add helm repo :</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>         <code>helm repo add chartmuseum <a rel="noreferrer noopener" href="https://chartmuseum.github.io/charts" target="_blank">https://chartmuseum.github.io/charts</a>   </code></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Update the repo :</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>           <code>helm repo update</code></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Here, we can just run helm install since we need to tell chartmuseum to use Space as a holy place to store charts instead of local PVC ( default).</li><li>Download the chart to your local system by running :</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><code>helm pull chartmuseum/chartmuseum ‚Äîuntar</code></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><span style="background-color:var(--wp--custom--color--background);color:var(--wp--custom--color--foreground);font-family:var(--wp--preset--font-family--body-font);font-size:var(--wp--preset--font-size--normal);">Next, </span><code style="color:var(--wp--custom--color--foreground);font-size:var(--wp--preset--font-size--normal);">cd</code><span style="background-color:var(--wp--custom--color--background);color:var(--wp--custom--color--foreground);font-family:var(--wp--preset--font-family--body-font);font-size:var(--wp--preset--font-size--normal);"> to <em>chartmuseum </em>directory and open </span><code style="color:var(--wp--custom--color--foreground);font-size:var(--wp--preset--font-size--normal);">values.yaml</code><span style="background-color:var(--wp--custom--color--background);color:var(--wp--custom--color--foreground);font-family:var(--wp--preset--font-family--body-font);font-size:var(--wp--preset--font-size--normal);"> in your fav text editor.</span></li><li>Update the fields to look like below :</li></ul>
<!-- /wp:list -->

<!-- wp:syntaxhighlighter/code {"language":"yaml"} -->
<pre class="wp-block-syntaxhighlighter-code">STORAGE: "amazon"
STORAGE_AMAZON_BUCKET: &lt;your space name&gt;
STORAGE_AMAZON_REGION: &lt;region in which your space is created for ex: sgp1 for Singapore&gt;
STORAGE_AMAZON_ENDPOINT: "https://&lt;REGION&gt;.digitaloceanspaces.com"

#enable API to interact with endpoint 
DISABLE_API: false
#secret section
BASIC_AUTH_USER: admin  
# password for basic http authentication
BASIC_AUTH_PASS: secret_password123
#Spaces access key
AWS_ACCESS_KEY_ID: "YOUR KEY"
#spacess secret key
AWS_SECRET_ACCESS_KEY: "YOUR SECRET KEY"</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>That's it, run the below command to install the chart :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>helm install chartmuseum chartmuseum/ -f chartmuseum/values.yaml</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Next, add an entry in ingress to point to your Repository URL. Here is mine ( example) :</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"yaml"} -->
<pre class="wp-block-syntaxhighlighter-code">- host: chartmuseum.tanmaybhat.tk
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: chartmuseum
                port:
                  number: 80</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Please note that you need to set <em>False </em>to <em>Disable_API</em> else you cant send any data to your endpoint.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That's it, you can now add your repo to your helm by typing :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>helm repo add chartmuseum &lt;chartmuseum.example.com&gt; -u USERNAME -p PASSWORD</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you want to push chart to this repo, you can do that by installing the helm push plugin:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>helm plugin install https://github.com/chartmuseum/helm-push.git --version v0.9.0</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once installed, push the chart by running :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>helm push chart_directory chartmuseum</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy Helming !</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>References :</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>https://artifacthub.io/packages/helm/chartmuseum/chartmuseum</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>https://chartmuseum.com/</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>388</wp:post_id>
		<wp:post_date><![CDATA[2021-12-12 21:26:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-12-12 15:56:48]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-13 09:10:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-13 03:40:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hosting-the-chartmuseum-in-digital-ocean-space]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="aws-s3"><![CDATA[aws s3]]></category>
		<category domain="post_tag" nicename="chartmuseum"><![CDATA[chartmuseum]]></category>
		<category domain="post_tag" nicename="digital-ocean"><![CDATA[digital ocean]]></category>
		<category domain="post_tag" nicename="helm"><![CDATA[helm]]></category>
		<category domain="post_tag" nicename="helm-push"><![CDATA[helm push]]></category>
		<category domain="post_tag" nicename="spaces"><![CDATA[spaces]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5cb6e3d710bd6df6fa760c91bde1f77d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_13e4655f7b24b9e1c62217f57045df7b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[66427869501]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1639324444]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5d2ec1a3e61426f5549784e0fd6e9964]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a1651bf284f8503e7d6e71d2e0c46faf]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021-12-08]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	